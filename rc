#

set-option -g prefix ^q
bind-key ^q send-prefix # double for nested sessions

#
set-option -g escape-time 0
set-option -g base-index 1

#
set-option -g destroy-unattached off
set-option -g default-terminal tmux-256color

#
set-option -g status-left-length 99
set-option -g status-justify right
set-option -g status-right "%H%M"

# embedded these instead because it wants to use trailing, desire leading
#set-option -qwg window-status-separator "·"
#set-option -qwg window-status-separator "¦"
#set-option -qwg window-status-separator " »"
#set-option -qwg window-status-separator "°"
#set-option -qwg window-status-separator "¤"

###

# status format subshells using #() (and new panes) fork and copy PTEs
# which become large and copy very slow with large scrollback, see tmux
# issue 3352 for description, workarounds and potential [future]
# solution with posix_spawn()
#
# to add 10M scrollback for testing:
# $ perl -le 'for ($i = 0; $i < 10000000; $i++) {print "a" x 78}'
#
# with no status subshells, "refresh-client -S" takes 0s, no matter
# scrollback.  with status-left subshells, "refresh-client -S" takes
# 0.13s, 0.22s, 0.31s and 0.42s for each additional 10M lines.  by this
# time cpu fans are going, takes 66 seconds to enter copy-paste mode,
# with lines 0/29999999 shown, scrolling painfully slow, then stops
# interaction altogether, cpu 100%
#
# with 10M lines using GLIBC_TUNABLES=glibc.malloc.hugetlb=1 and with
# /sys/kernel/mm/transparent_hugepage/ enable=madvise, the time for
# "refresh-client -S" reduces to 0.05s (IFF the system has a lot of
# memory free and highly tuned khugepaged), so we'll keep this in our
# invocation wrapper (see .bash commit dbe32d9), but we don't want all
# tmux-started procs to get it automatically so we unset.
#
# UPDATE: we're now using posix_spawn patch for background jobs from
# tmux PR 4496 which makes the penalty exist only on new-window or
# when entering scrollback (counting lines maybe?).  but we leave it at
# 1M... even once the window is closed (and presumably the allocations
# are freed), the memory doesn't seem to ever be returned to the system,
# even using a low mmap_threshold of 4096.  this might be a glibc
# allocator issue.  also the history-limit is per-window, and is in
# lines, so it gets worse as more and larger-dimension windows reach it.
# issue 3352 discusses a desire for global byte limit instead, but this
# is not yet implemented.
#
set-option -g history-limit 1048575 # nee 2147483647
set-environment -gu GLIBC_TUNABLES

# require tmux 2.6 for more advanced config; use v1 config before that.
# we still run on hosts with tmux as old as 1.6 (u14, rhel6). u18 is 2.6
#
# v2.0+ if -F
# v2.1+ set -q
# v2.2+ set-hook, #{s/str/str:}
# v2.4+ %if/%endif
# v2.6+ #{m:}, set -F
#
if-shell \
'\
pid=${TMUX#*,}; \
pid=${pid%,*}; \
ver=$(/proc/$pid/exe -V); \
ver=${ver#* }; \
ver=${ver#*-}; \
ver=${ver%[a-z]}; \
x=${ver%.*}; \
y=${ver#*.}; \
test $x -ge 3 || \
test $x -eq 2 -a $y -ge 6; \
' \
"source-file ~/.tmux/v2rc" \
"source-file ~/.tmux/v1rc" \
;
